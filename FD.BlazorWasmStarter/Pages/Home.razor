@page "/"
@using System.Text
@using FD.BlazorWasmStarter.Enums
@inject NavigationManager Navigation
@inject IToastService ToastService
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

<div class="d-flex flex-column align-items-center vh-100">
    <div class="card shadow-lg w-100 mx-2 mx-md-0 mb-3" style="max-width: 960px;">
        <div class="card-header gradient-header text-white d-flex align-items-center animate-header">
            <span class="me-2 fs-4 animate-icon">🔒</span>
            <h3 class="mb-0 animate-title">Password Generator</h3>
        </div>

        <div class="card-body animate-card">
            <div class="input-group mb-4">
                <input @bind="password" readonly="readonly" type="text" class="form-control form-control-lg" placeholder="Generated Password">
                <button @onmouseenter="@(() => OnEmojiHover("copy"))" @onmouseleave="@OnEmojiMouseLeft" @onclick="@(() => CopyPasswordToClipboard(string.Empty))" class="btn btn-outline-secondary my-clickable-button @onHoverCopyCss animate-button" id="basic-addon2">📄</button>
                <span @onclick="HandleGeneratePasswordClick" @onmouseenter="@(() => OnEmojiHover("generate"))" @onmouseleave="@OnEmojiMouseLeft" class="input-group-text my-clickable-button @onHoverGenerateCss" id="basic-addon3">🔄</span>
                <span @onclick="HandleSavePasswordClick" @onmouseenter="@(() => OnEmojiHover("save"))" @onmouseleave="@OnEmojiMouseLeft" class="input-group-text my-clickable-button @onHoverSaveCss" id="basic-addon4">💾</span>
            </div>
            <div class="mb-3">
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="inlineCheckbox1" @bind="@includeNumbers" @oninput="@((args) => HandleCheckboxOnChange(args,CheckBoxActionType.Numbers))">
                    <label class="form-check-label" for="inlineCheckbox1">Numbers</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="inlineCheckbox2" @bind="@includeLowercase" @oninput="@((args) => HandleCheckboxOnChange(args,CheckBoxActionType.Lowercase))">
                    <label class="form-check-label" for="inlineCheckbox2">Lowercase</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="inlineCheckbox3" @bind="@includeUppercase" @oninput="@((args) => HandleCheckboxOnChange(args,CheckBoxActionType.Uppercase))">
                    <label class="form-check-label" for="inlineCheckbox3">Uppercase</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="inlineCheckbox4" @bind="@includeSpecialChars" @oninput="@((args) => HandleCheckboxOnChange(args,CheckBoxActionType.SpecialChars))">
                    <label class="form-check-label" for="inlineCheckbox4">Special Chars</label>
                </div>
            </div>
            <div class="container mt-4">
                <h5 class="mb-3">Password Length</h5>
                <div class="row align-items-center">
                    <div class="col-md-2 mb-2 mb-md-0">
                        <input @bind=@passwordLength type="number" class="form-control" min="6" max="50" @oninput="@HandlePasswordLengthInputOnChange" />
                    </div>
                    <div class="col-md-8 mb-2 mb-md-0">
                        <input type="range" class="form-range" step="1" min="6" max="50" @bind="passwordLength" @oninput="HandleRangeOnChange" />
                    </div>
                    <div class="col-md-2">
                        <span class="badge bg-primary fs-6">@passwordLength characters</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* @bind metodu onChange ile birlikte calisir. onInput ile calisamaz. Eger diger metodlarla kullanmak istersek kendi metodumuzu yazariz. *@
    @* Kendi metodumuzu yazdigimizda, sistemin bekledigi dönüs tipini parametresiz olarak saglanirsa daha temiz kod yazilabiliyor. Eger parametre vermek gerekirse, o zaman lambda exp.vermek gerekiyor. *@


    <div class="card shadow-lg w-100 mx-2 mx-md-0" style="max-width: 960px;">
        <div class="card-header gradient-header text-white d-flex align-items-center animate-header">
            <span class="me-2 fs-4 animate-icon">💾</span>
            <h3 class="mb-0 animate-title">Saved Passwords</h3>
        </div>
        <div class="card-body animate-card">
            @if (savedPasswords.Any())
            {
                <ul class="list-group">
                    @foreach (var savedPassword in savedPasswords)
                    {
                        <li class="list-group-item animate-list-item d-flex justify-content-between">
                            <span>@savedPassword</span>
                            <div>
                                <button class="btn btn-outline-info ms-auto" type="button" @onclick="@(() => CopyPasswordToClipboard(savedPassword))">📄</button>
                                <button class="btn btn-outline-danger ms-auto" type="button" @onclick="@(() => HandleDeleteButtonClick(savedPassword))">🗑️</button>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <h5 class="text-center text-muted">There aren't any saved passwords.</h5>
            }
        </div>
    </div>
</div>




@code
{
    private string password = string.Empty;
    private int passwordLength = 12;
    private HashSet<string> savedPasswords = [];


    private string onHoverCopyCss = string.Empty;
    private string onHoverGenerateCss = string.Empty;
    private string onHoverSaveCss = string.Empty;

    private static Random random = new Random();
    private static StringBuilder stringBuilder = new StringBuilder(); //Immutable'i(string'lerin degistirilememesi) kaldirmak icin

    private bool includeLowercase = true;
    private bool includeUppercase = true;
    private bool includeNumbers = true;
    private bool includeSpecialChars = true;

    private const string lowerCaseLetters = "abcdefghijklmnopqrstuvwxyz";
    private const string upperCaseLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private const string numbers = "0123456789";
    private const string specialCharacters = "!@#$%^&*()_+-=[]{}|;:,.<>?";

    // allLowercaseLetters = "abcdefghijklmnopqrstuvwxyz";
    // allUppercaseLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    // allNumbers = "0123456789";
    // allSpecialCharacters = "!@#$%^&*()_+-=[]{}|;':,.<>?";
    // Istanbul Lat/Long: 41.0082° N, 28.9784° E

    #region Overrides of ComponentBase

    protected override void OnInitialized()
    {
        GeneratePassword();

        base.OnInitialized();
    }

    #endregion

    private void HandleDeleteButtonClick(string passwordToDelete)
    {
        savedPasswords.Remove(passwordToDelete);

        ToastService.ShowSuccess("The selected password deleted.");
    }

    async Task CopyPasswordToClipboard(string? passwordToCopy)
    {
        if (string.IsNullOrWhiteSpace(passwordToCopy))
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", password);

        else
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", passwordToCopy);


        ToastService.ShowSuccess("The password copied.");
    }

    private void HandlePasswordLengthInputOnChange(ChangeEventArgs args)
    {
        if (args.Value is null)
            return;

        passwordLength = Convert.ToInt32(args.Value);

        GeneratePassword();
    }

    private void HandleRangeOnChange(ChangeEventArgs args)
    {
        if (args.Value is null)
            return;

        passwordLength = Convert.ToInt32(args.Value);

        GeneratePassword();
    }

    // private void HandleSaveIconClick()
    // {
    //     Navigation.NavigateTo("/counter");
    // }


    private void HandleSavePasswordClick()
    {
        // if (string.IsNullOrEmpty(password) || savePasswords.Any(x => x == password))
        if (string.IsNullOrEmpty(password) || savedPasswords.Any(x => x == password))
            return;

        savedPasswords.Add(password);

        ToastService.ShowInfo("The selected password saved!");
    }

    private void HandleCheckboxOnChange(ChangeEventArgs args, CheckBoxActionType actionType)
    {
        if (args.Value is null) // args.Value == null seklinde kullanmiyoruz. Cünkü operatörler sonradan override edilebiliyor.
            return;

        var result = actionType switch
        {
            CheckBoxActionType.Numbers => includeNumbers = (bool)args.Value,
            CheckBoxActionType.Uppercase => includeUppercase = (bool)args.Value,
            CheckBoxActionType.Lowercase => includeLowercase = (bool)args.Value,
            CheckBoxActionType.SpecialChars => includeSpecialChars = (bool)args.Value,
            _ => throw new ArgumentException("Gecersiz CheckBoxActionType", nameof(actionType))
        };

        GeneratePassword();
    }


    private void HandleGeneratePasswordClick()
    {
        GeneratePassword();
    }

    private void GeneratePassword()
    {
        stringBuilder.Clear();

        var validChars = new StringBuilder();

        if (includeLowercase)
            validChars.Append(lowerCaseLetters);

        if (includeUppercase)
            validChars.Append(upperCaseLetters);

        if (includeNumbers)
            validChars.Append(numbers);

        if (includeSpecialChars)
            validChars.Append(specialCharacters);

        if (!includeUppercase && !includeLowercase && !includeNumbers && !includeSpecialChars)
        {
            includeNumbers = true;
            validChars.Append(numbers);
        }

        for (int i = 0; i < passwordLength; i++)
        {
            // var randomNumber = random.Next(0, 10);
            var randomIndex = random.Next(0, validChars.Length);

            stringBuilder.Append(validChars[randomIndex]);
        }
        // password += randomNumber.ToString();
        password = stringBuilder.ToString();
    }


    private void OnEmojiHover(string iconType)
    {
        switch (iconType)
        {
            case "copy":
                onHoverCopyCss = "bg-secondary";
                break;
            case "generate":
                onHoverGenerateCss = "bg-secondary";
                break;
            case "save":
                onHoverSaveCss = "bg-secondary";
                break;
            default:
                break;
        };
    }


    private void OnEmojiMouseLeft()
    {
        onHoverCopyCss = string.Empty;
        onHoverGenerateCss = string.Empty;
        onHoverSaveCss = string.Empty;
    }
}

<style>
    .card {
        border-radius: 1rem;
    }

    .card-header {
        border-top-left-radius: 1rem;
        border-top-right-radius: 1rem;
    }

    .gradient-header {
        background: #005C97; /* fallback for old browsers */
        background: -webkit-linear-gradient(to right, #363795, #005C97); /* Chrome 10-25, Safari 5.1-6 */
        background: linear-gradient(to right, #363795, #005C97); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
    }

    .form-control-lg {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    .input-group-text {
        cursor: pointer;
    }

        .input-group-text:hover {
            background-color: #f8f9fa;
        }

    .my-clickable-button {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }

    .form-check-label {
        margin-left: 0.5rem;
    }

    .badge {
        font-size: 1rem;
    }

    .shadow-lg {
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    .vh-100 {
        height: 100vh;
    }

    @@media (max-width: 960px) {
        .card {
            margin: 0 1rem;
        }
    }

    /* Animations */
    .animate-header {
        animation: fadeInDown 1s;
    }

    .animate-card {
        animation: fadeIn 1.5s;
    }

    .animate-icon {
        animation: bounce 2s infinite;
    }

    .animate-title {
        animation: fadeInLeft 1s;
    }

    .animate-button {
        transition: transform 0.2s;
    }

        .animate-button:hover {
            transform: scale(1.1);
        }

    .animate-checkboxes {
        animation: fadeInRight 1s;
    }

    .animate-list {
        animation: fadeInUp 1.5s;
    }

    .animate-list-item {
        opacity: 0;
        transform: translateY(20px);
        animation: fadeInUp 1s forwards;
    }

    @@keyframes fadeInDown {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100% {
            transform: translateY(0);
        }

        40% {
            transform: translateY(-10px);
        }

        60% {
            transform: translateY(-5px);
        }
    }

    @@keyframes fadeInLeft {
        from {
            opacity: 0;
            transform: translateX(-20px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @@keyframes fadeInRight {
        from {
            opacity: 0;
            transform: translateX(20px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes fadeOut {
        from {
            opacity: 1;
        }

        to {
            opacity: 0;
        }
    }
</style>